Key Notes on Conditional Statements in Java
===========================================

Conditional statements in Java allow the execution of specific blocks of code based on given conditions.
Java provides several types of conditional statements:

------------------------------------------------------------
1Ô∏è‚É£ if Statement
------------------------------------------------------------
Used to execute a block of code **only if a condition is true**.

üîπ **Syntax:**

if (condition) {
    // Code to execute if condition is true
}

‚úÖ Example:

int age = 18;
if (age >= 18) {
    System.out.println("You are eligible to vote.");
}

------------------------------------------------------------
2Ô∏è‚É£ if-else Statement
------------------------------------------------------------
Used when we want to execute one block of code if the condition is true and another block if the condition is
false.

üîπ Syntax:

if (condition) {
    // Code to execute if condition is true
} else {
    // Code to execute if condition is false
}
‚úÖ Example:

java
Copy
Edit
int num = 10;
if (num % 2 == 0) {
    System.out.println("Even number");
} else {
    System.out.println("Odd number");
}

------------------------------------------------------------
3Ô∏è‚É£ if-else-if Ladder
------------------------------------------------------------
Used when there are multiple conditions to check.

üîπ Syntax:

if (condition1) {
    // Code to execute if condition1 is true
} else if (condition2) {
    // Code to execute if condition2 is true
} else {
    // Code to execute if none of the conditions are true
}
‚úÖ Example:

int marks = 85;
if (marks >= 90) {
    System.out.println("Grade: A");
} else if (marks >= 80) {
    System.out.println("Grade: B");
} else if (marks >= 70) {
    System.out.println("Grade: C");
} else {
    System.out.println("Grade: D");
}
------------------------------------------------------------
4Ô∏è‚É£ Nested if Statement
------------------------------------------------------------
An if statement inside another if statement.

üîπ Syntax:

if (condition1) {
    if (condition2) {
        // Code to execute if both condition1 and condition2 are true
    }
}
‚úÖ Example:

int age = 20;
boolean hasID = true;
if (age >= 18) {
    if (hasID) {
        System.out.println("You can enter the club.");
    } else {
        System.out.println("You need an ID to enter.");
    }
} else {
    System.out.println("You are not old enough.");
}

------------------------------------------------------------
5Ô∏è‚É£ switch Statement
------------------------------------------------------------

Used when there are multiple possible values for a variable. More efficient than multiple if-else conditions
when dealing with fixed values.

üîπ Syntax:

switch (variable) {
    case value1:
        // Code to execute for value1
        break;
    case value2:
        // Code to execute for value2
        break;
    default:
        // Code to execute if no case matches
}
‚úÖ Example:

int day = 3;
switch (day) {
    case 1:
        System.out.println("Monday");
        break;
    case 2:
        System.out.println("Tuesday");
        break;
    case 3:
        System.out.println("Wednesday");
        break;
    default:
        System.out.println("Invalid day");
}
‚ö†Ô∏è Important Notes on switch Statement:
‚úî Use break to prevent fall-through to the next case.
‚úî The default case executes if none of the cases match.
‚úî The switch statement works with int, char, String, and enum types.

‚úÖ Best Practices When Using Conditional Statements
‚úî Use switch instead of multiple if-else statements when working with fixed values for better readability.
‚úî Use braces {} in all if statements, even for a single-line execution, to avoid errors in large codebases.
‚úî Optimize conditions by placing the most frequent ones first in an if-else ladder.
‚úî Use logical operators (&&, ||, !) to simplify conditions.

By understanding and following these key points, we can write efficient and readable Java programs using
conditional statements!