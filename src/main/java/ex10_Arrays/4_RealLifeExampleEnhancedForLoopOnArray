
/*
1Ô∏è‚É£ Real-Life Example on how enhanced for loop works for 2-dimensional array:
1. Think of it Like a Lunch Tray
Imagine you have a lunch tray with 3 plates, and each plate has some food items on it:

Plate 1: [Apple, Banana]
Plate 2: [Pizza, Burger]
Plate 3: [Rice, Chicken, Salad]
Now, you want to pick up each plate one by one, and for each plate, you want to eat every item on it.

Code Representation

for (int arr[] : row)   // Picking up each plate (row)
{
    for (int x : arr)   // Eating each food item on the plate (column)
    {
        System.out.print(x + " ");
    }
    System.out.println();  // Move to the next plate (row)
}

What Happens?
Pick Plate 1 ‚Üí Eat Apple & Banana
Apple Banana

Pick Plate 2 ‚Üí Eat Pizza & Burger
Pizza Burger

Pick Plate 3 ‚Üí Eat Rice, Chicken & Salad
Rice Chicken Salad
This is exactly how the enhanced for loop works! üéâ

2Ô∏è‚É£ Visual Table Representation
Let‚Äôs think of your array as a table:

Row Index	Elements
0	100, 200
1	300, 400
2	500, 600, 700
Loop Execution
üîπ First Outer Loop Execution (arr = {100, 200})
Inner Loop: 100 ‚Üí 200
Prints:
100 200

üîπ Second Outer Loop Execution (arr = {300, 400})
Inner Loop: 300 ‚Üí 400
Prints:
300 400

üîπ Third Outer Loop Execution (arr = {500, 600, 700})
Inner Loop: 500 ‚Üí 600 ‚Üí 700
Prints:
500 600 700
Final Output
100 200
300 400
500 600 700
3Ô∏è‚É£ Breaking it Down Step by Step
Here‚Äôs what happens in slow motion:

Step 1: Outer Loop Starts (arr[] takes first row)
int arr[] = {100, 200};   // First row

Step 2: Inner Loop Runs
for (int x : arr) {
    System.out.print(x + " ");
}
x = 100 ‚Üí Prints 100
x = 200 ‚Üí Prints 200
Moves to a new line (\n).

Step 3: Outer Loop Picks Second Row
int arr[] = {300, 400};   // Second row
Inner loop prints 300 400.

Step 4: Outer Loop Picks Third Row
int arr[] = {500, 600, 700};   // Third row
Inner loop prints 500 600 700.

4Ô∏è‚É£ Comparison with Regular For Loop
Regular For Loop (Using Indexes)

for (int i = 0; i < row.length; i++) {   // i = row index
    for (int j = 0; j < row[i].length; j++) {  // j = column index
        System.out.print(row[i][j] + " ");
    }
    System.out.println();
}
Enhanced For Loop (Easier to Read)
for (int arr[] : row) {  // Picks each row
    for (int x : arr) {  // Picks each element in row
        System.out.print(x + " ");
    }
    System.out.println();
}
‚úÖ No need to use i and j.
‚úÖ Easier to understand.

5Ô∏è‚É£ Another Example with Words
Let‚Äôs say we have words instead of numbers:

String words[][] = {
    {"Hello", "World"},
    {"Java", "Programming"},
    {"Enhanced", "For", "Loop"}
};
Now using the enhanced for loop:

for (String[] row : words) {
    for (String word : row) {
        System.out.print(word + " ");
    }
    System.out.println();
}
Output:
Hello World
Java Programming
Enhanced For Loop
Same logic, but instead of numbers, we print words.

Summary
Think of a 2D array as a table with rows and columns.

The outer loop picks one row at a time.

The inner loop picks each element in that row.

It's like picking a plate (row) and eating all food (columns) on it.

It‚Äôs much simpler than a regular for loop because it avoids indexing.

I hope one of these explanations clicks for you! üòä Let me know if you want me to explain it in another way! üöÄ


1Ô∏è‚É£ Supermarket Analogy (Shopping Rows & Items)
Imagine you go to a supermarket that has three shelves.
Each shelf contains different numbers of items:

Shelf (Row)	Items on the Shelf (Columns)
Shelf 1	Bread, Butter
Shelf 2	Apple, Banana
Shelf 3	Milk, Cheese, Yogurt
Now, you want to visit each shelf and pick up each item on it.

Code Representation

for (String shelf[] : supermarket)   // Going to each shelf
{
    for (String item : shelf)   // Picking up each item from the shelf
    {
        System.out.print(item + " ");
    }
    System.out.println();  // Move to the next shelf
}
Output
Bread Butter
Apple Banana
Milk Cheese Yogurt
üõí Outer loop = Walking to the next shelf.
üçû Inner loop = Picking each item from that shelf.

This is exactly how the enhanced for loop works! üéâ

2Ô∏è‚É£ Train with Compartments (Passengers as Items)
Imagine a train with three compartments, and each compartment has different numbers of passengers.

Compartment (Row)	Passengers (Columns)
Compartment 1	Alice, Bob
Compartment 2	Charlie, David
Compartment 3	Eve, Frank, Grace
Loop Breakdown
Outer Loop: Visits each compartment.

Inner Loop: Reads out each passenger's name.
Code
for (String compartment[] : train)   // Moving to each compartment
{
    for (String passenger : compartment)   // Calling each passenger
    {
        System.out.print(passenger + " ");
    }
    System.out.println();  // Move to the next compartment
}
Output
Alice Bob
Charlie David
Eve Frank Grace
üöÜ Outer loop = Moving to the next compartment.
üßë‚Äçü§ù‚Äçüßë Inner loop = Reading each passenger's name.

3Ô∏è‚É£ Think of it Like a Storybook (Pages & Sentences)
Imagine you're reading a storybook where each page has some sentences:

Page (Row)	Sentences (Columns)
Page 1	"Once upon a time", "There was a king"
Page 2	"He had a big castle", "It was beautiful"
Page 3	"One day, a dragon came", "The king fought bravely", "And he won"
Loop Breakdown
Outer Loop: Turns to the next page.

Inner Loop: Reads each sentence on the page.

Code

for (String page[] : book)   // Turning to next page
{
    for (String sentence : page)   // Reading each sentence
    {
        System.out.print(sentence + " | ");
    }
    System.out.println();  // Move to the next page
}
Output

Once upon a time | There was a king |
He had a big castle | It was beautiful |
One day, a dragon came | The king fought bravely | And he won |
üìñ Outer loop = Turning to the next page.
üìú Inner loop = Reading each sentence.

4Ô∏è‚É£ The Simplest Step-by-Step Breakdown (With Boxes)
Imagine we have 3 big boxes, and inside each box, we have smaller items.

Box Representation
Big Box 1 ‚Üí [Item A, Item B]
Big Box 2 ‚Üí [Item C, Item D]
Big Box 3 ‚Üí [Item E, Item F, Item G]
How the Loops Work
1Ô∏è‚É£ Outer loop picks one big box at a time.
2Ô∏è‚É£ Inner loop picks each item from that big box.

Code
for (String box[] : warehouse)   // Opening each big box
{
    for (String item : box)   // Taking each item out
    {
        System.out.print(item + " ");
    }
    System.out.println();  // Move to the next big box
}
Output
Item A Item B
Item C Item D
Item E Item F Item G
üì¶ Outer loop = Opening each big box.
üìÑ Inner loop = Taking out each item.

5Ô∏è‚É£ Understanding with Colors üé®
Imagine we have three color palettes, and each palette has different colors.

Palette (Row)	Colors (Columns)
Palette 1	Red, Blue
Palette 2	Green, Yellow
Palette 3	Orange, Purple, Pink
Loop Breakdown
Outer Loop: Picks up a palette.

Inner Loop: Looks at each color in that palette.

Code
for (String palette[] : colors)   // Picking up each palette
{
    for (String color : palette)   // Looking at each color
    {
        System.out.print(color + " ");
    }
    System.out.println();  // Move to the next palette
}
Output
Red Blue
Green Yellow
Orange Purple Pink
üé® Outer loop = Picking a new color palette.
üñåÔ∏è Inner loop = Looking at each color.

Final Summary
‚úÖ The outer loop goes through each row (big group of items).
‚úÖ The inner loop goes through each item in that row.
‚úÖ It‚Äôs just like checking shelves in a supermarket, reading a book, or opening boxes in a warehouse.


Final Challenge for You
Try writing your own enhanced for loop for this example:

String animals[][] = {
    {"Lion", "Tiger"},
    {"Elephant", "Giraffe"},
    {"Dog", "Cat", "Rabbit"}
};
‚ùì Can you predict what the output will be? ü§î
 */